// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: hip.proto

package openhip_hip

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HitgenCMD_EncryptionType int32

const (
	HitgenCMD_DSA   HitgenCMD_EncryptionType = 0
	HitgenCMD_RSA   HitgenCMD_EncryptionType = 1
	HitgenCMD_ECDSA HitgenCMD_EncryptionType = 2
	HitgenCMD_EdDSA HitgenCMD_EncryptionType = 3
)

// Enum value maps for HitgenCMD_EncryptionType.
var (
	HitgenCMD_EncryptionType_name = map[int32]string{
		0: "DSA",
		1: "RSA",
		2: "ECDSA",
		3: "EdDSA",
	}
	HitgenCMD_EncryptionType_value = map[string]int32{
		"DSA":   0,
		"RSA":   1,
		"ECDSA": 2,
		"EdDSA": 3,
	}
)

func (x HitgenCMD_EncryptionType) Enum() *HitgenCMD_EncryptionType {
	p := new(HitgenCMD_EncryptionType)
	*p = x
	return p
}

func (x HitgenCMD_EncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HitgenCMD_EncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_hip_proto_enumTypes[0].Descriptor()
}

func (HitgenCMD_EncryptionType) Type() protoreflect.EnumType {
	return &file_hip_proto_enumTypes[0]
}

func (x HitgenCMD_EncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HitgenCMD_EncryptionType.Descriptor instead.
func (HitgenCMD_EncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_hip_proto_rawDescGZIP(), []int{1, 0}
}

type HipCMD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDetail        bool   `protobuf:"varint,1,opt,name=is_detail,json=isDetail,proto3" json:"is_detail,omitempty"`
	IsQuiet         bool   `protobuf:"varint,2,opt,name=is_quiet,json=isQuiet,proto3" json:"is_quiet,omitempty"`
	IsDeamon        bool   `protobuf:"varint,3,opt,name=is_deamon,json=isDeamon,proto3" json:"is_deamon,omitempty"`
	IsR1            bool   `protobuf:"varint,4,opt,name=is_r1,json=isR1,proto3" json:"is_r1,omitempty"`
	IsOpportunistic bool   `protobuf:"varint,5,opt,name=is_opportunistic,json=isOpportunistic,proto3" json:"is_opportunistic,omitempty"`
	IsAllowAny      bool   `protobuf:"varint,6,opt,name=is_allow_any,json=isAllowAny,proto3" json:"is_allow_any,omitempty"`
	ConfPath        string `protobuf:"bytes,7,opt,name=conf_path,json=confPath,proto3" json:"conf_path,omitempty"`
	IsPersissive    bool   `protobuf:"varint,8,opt,name=is_persissive,json=isPersissive,proto3" json:"is_persissive,omitempty"`
	IsNoRetransmit  bool   `protobuf:"varint,9,opt,name=is_no_retransmit,json=isNoRetransmit,proto3" json:"is_no_retransmit,omitempty"`
	TriggerAddress  string `protobuf:"bytes,10,opt,name=trigger_address,json=triggerAddress,proto3" json:"trigger_address,omitempty"`
	IsRvs           bool   `protobuf:"varint,11,opt,name=is_rvs,json=isRvs,proto3" json:"is_rvs,omitempty"`
	IsMr            bool   `protobuf:"varint,12,opt,name=is_mr,json=isMr,proto3" json:"is_mr,omitempty"`
	IsMh            bool   `protobuf:"varint,13,opt,name=is_mh,json=isMh,proto3" json:"is_mh,omitempty"`
}

func (x *HipCMD) Reset() {
	*x = HipCMD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HipCMD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HipCMD) ProtoMessage() {}

func (x *HipCMD) ProtoReflect() protoreflect.Message {
	mi := &file_hip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HipCMD.ProtoReflect.Descriptor instead.
func (*HipCMD) Descriptor() ([]byte, []int) {
	return file_hip_proto_rawDescGZIP(), []int{0}
}

func (x *HipCMD) GetIsDetail() bool {
	if x != nil {
		return x.IsDetail
	}
	return false
}

func (x *HipCMD) GetIsQuiet() bool {
	if x != nil {
		return x.IsQuiet
	}
	return false
}

func (x *HipCMD) GetIsDeamon() bool {
	if x != nil {
		return x.IsDeamon
	}
	return false
}

func (x *HipCMD) GetIsR1() bool {
	if x != nil {
		return x.IsR1
	}
	return false
}

func (x *HipCMD) GetIsOpportunistic() bool {
	if x != nil {
		return x.IsOpportunistic
	}
	return false
}

func (x *HipCMD) GetIsAllowAny() bool {
	if x != nil {
		return x.IsAllowAny
	}
	return false
}

func (x *HipCMD) GetConfPath() string {
	if x != nil {
		return x.ConfPath
	}
	return ""
}

func (x *HipCMD) GetIsPersissive() bool {
	if x != nil {
		return x.IsPersissive
	}
	return false
}

func (x *HipCMD) GetIsNoRetransmit() bool {
	if x != nil {
		return x.IsNoRetransmit
	}
	return false
}

func (x *HipCMD) GetTriggerAddress() string {
	if x != nil {
		return x.TriggerAddress
	}
	return ""
}

func (x *HipCMD) GetIsRvs() bool {
	if x != nil {
		return x.IsRvs
	}
	return false
}

func (x *HipCMD) GetIsMr() bool {
	if x != nil {
		return x.IsMr
	}
	return false
}

func (x *HipCMD) GetIsMh() bool {
	if x != nil {
		return x.IsMh
	}
	return false
}

type HitgenCMD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDetail   bool                     `protobuf:"varint,1,opt,name=is_detail,json=isDetail,proto3" json:"is_detail,omitempty"`
	Basename   string                   `protobuf:"bytes,2,opt,name=basename,proto3" json:"basename,omitempty"`
	Encryption HitgenCMD_EncryptionType `protobuf:"varint,3,opt,name=encryption,proto3,enum=openhip.hip.HitgenCMD_EncryptionType" json:"encryption,omitempty"`
	CurveId    uint32                   `protobuf:"varint,4,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
	HitSuitId  uint32                   `protobuf:"varint,5,opt,name=hit_suit_id,json=hitSuitId,proto3" json:"hit_suit_id,omitempty"`
	Bits       uint32                   `protobuf:"varint,6,opt,name=bits,proto3" json:"bits,omitempty"`
	Length     uint32                   `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"`
	IsAnon     bool                     `protobuf:"varint,8,opt,name=is_anon,json=isAnon,proto3" json:"is_anon,omitempty"`
	IsIncoming bool                     `protobuf:"varint,9,opt,name=is_incoming,json=isIncoming,proto3" json:"is_incoming,omitempty"`
	R1Count    uint64                   `protobuf:"varint,10,opt,name=r1_count,json=r1Count,proto3" json:"r1_count,omitempty"`
	FilePath   string                   `protobuf:"bytes,11,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	IsPublish  bool                     `protobuf:"varint,12,opt,name=is_publish,json=isPublish,proto3" json:"is_publish,omitempty"`
	IsConf     bool                     `protobuf:"varint,13,opt,name=is_conf,json=isConf,proto3" json:"is_conf,omitempty"`
	IsNoinput  bool                     `protobuf:"varint,14,opt,name=is_noinput,json=isNoinput,proto3" json:"is_noinput,omitempty"`
	IsAppend   bool                     `protobuf:"varint,15,opt,name=is_append,json=isAppend,proto3" json:"is_append,omitempty"`
	Hhit       string                   `protobuf:"bytes,16,opt,name=hhit,proto3" json:"hhit,omitempty"`
}

func (x *HitgenCMD) Reset() {
	*x = HitgenCMD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitgenCMD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitgenCMD) ProtoMessage() {}

func (x *HitgenCMD) ProtoReflect() protoreflect.Message {
	mi := &file_hip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitgenCMD.ProtoReflect.Descriptor instead.
func (*HitgenCMD) Descriptor() ([]byte, []int) {
	return file_hip_proto_rawDescGZIP(), []int{1}
}

func (x *HitgenCMD) GetIsDetail() bool {
	if x != nil {
		return x.IsDetail
	}
	return false
}

func (x *HitgenCMD) GetBasename() string {
	if x != nil {
		return x.Basename
	}
	return ""
}

func (x *HitgenCMD) GetEncryption() HitgenCMD_EncryptionType {
	if x != nil {
		return x.Encryption
	}
	return HitgenCMD_DSA
}

func (x *HitgenCMD) GetCurveId() uint32 {
	if x != nil {
		return x.CurveId
	}
	return 0
}

func (x *HitgenCMD) GetHitSuitId() uint32 {
	if x != nil {
		return x.HitSuitId
	}
	return 0
}

func (x *HitgenCMD) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *HitgenCMD) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HitgenCMD) GetIsAnon() bool {
	if x != nil {
		return x.IsAnon
	}
	return false
}

func (x *HitgenCMD) GetIsIncoming() bool {
	if x != nil {
		return x.IsIncoming
	}
	return false
}

func (x *HitgenCMD) GetR1Count() uint64 {
	if x != nil {
		return x.R1Count
	}
	return 0
}

func (x *HitgenCMD) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *HitgenCMD) GetIsPublish() bool {
	if x != nil {
		return x.IsPublish
	}
	return false
}

func (x *HitgenCMD) GetIsConf() bool {
	if x != nil {
		return x.IsConf
	}
	return false
}

func (x *HitgenCMD) GetIsNoinput() bool {
	if x != nil {
		return x.IsNoinput
	}
	return false
}

func (x *HitgenCMD) GetIsAppend() bool {
	if x != nil {
		return x.IsAppend
	}
	return false
}

func (x *HitgenCMD) GetHhit() string {
	if x != nil {
		return x.Hhit
	}
	return ""
}

var File_hip_proto protoreflect.FileDescriptor

var file_hip_proto_rawDesc = []byte{
	0x0a, 0x09, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x69, 0x70, 0x2e, 0x68, 0x69, 0x70, 0x22, 0x95, 0x03, 0x0a, 0x06, 0x48, 0x69, 0x70,
	0x43, 0x4d, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x69, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x61, 0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x44, 0x65, 0x61, 0x6d, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x72,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x52, 0x31, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4f, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x6f, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x72, 0x76, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x52, 0x76, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6d, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x69,
	0x73, 0x5f, 0x6d, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4d, 0x68,
	0x22, 0xa6, 0x04, 0x0a, 0x09, 0x48, 0x69, 0x74, 0x67, 0x65, 0x6e, 0x43, 0x4d, 0x44, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x69, 0x70, 0x2e, 0x68, 0x69, 0x70, 0x2e, 0x48, 0x69, 0x74, 0x67, 0x65, 0x6e,
	0x43, 0x4d, 0x44, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x69, 0x74,
	0x5f, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x69, 0x74, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x31, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x72, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x68, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x68, 0x69, 0x74, 0x22,
	0x38, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53,
	0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x64, 0x44, 0x53, 0x41, 0x10, 0x03, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x6f, 0x2e,
	0x70, 0x61, 0x6e, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x69,
	0x70, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x69, 0x70, 0x5f, 0x68, 0x69, 0x70, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hip_proto_rawDescOnce sync.Once
	file_hip_proto_rawDescData = file_hip_proto_rawDesc
)

func file_hip_proto_rawDescGZIP() []byte {
	file_hip_proto_rawDescOnce.Do(func() {
		file_hip_proto_rawDescData = protoimpl.X.CompressGZIP(file_hip_proto_rawDescData)
	})
	return file_hip_proto_rawDescData
}

var file_hip_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hip_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hip_proto_goTypes = []interface{}{
	(HitgenCMD_EncryptionType)(0), // 0: openhip.hip.HitgenCMD.EncryptionType
	(*HipCMD)(nil),                // 1: openhip.hip.HipCMD
	(*HitgenCMD)(nil),             // 2: openhip.hip.HitgenCMD
}
var file_hip_proto_depIdxs = []int32{
	0, // 0: openhip.hip.HitgenCMD.encryption:type_name -> openhip.hip.HitgenCMD.EncryptionType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_hip_proto_init() }
func file_hip_proto_init() {
	if File_hip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HipCMD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitgenCMD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hip_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hip_proto_goTypes,
		DependencyIndexes: file_hip_proto_depIdxs,
		EnumInfos:         file_hip_proto_enumTypes,
		MessageInfos:      file_hip_proto_msgTypes,
	}.Build()
	File_hip_proto = out.File
	file_hip_proto_rawDesc = nil
	file_hip_proto_goTypes = nil
	file_hip_proto_depIdxs = nil
}
